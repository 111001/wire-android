package com.waz.annotions.processing.builders;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import com.waz.annotations.Controller;
import com.waz.annotations.Store;
import com.waz.annotions.processing.ProcessingException;
import com.waz.annotions.processing.types.CoreAnnotatedClass;

import javax.annotation.processing.Filer;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import java.io.IOException;
import java.util.Set;

public class CoreStubBuilder extends Builder<CoreAnnotatedClass> {

    private static final String BASE_PREFIX_STUB = "Stub";
    public static final String AUTOGENERATED_WARNING = "This class was AUTOGENERATED.\n\nAll changes will be overwritten with the next build.\n";

    protected static final String PACKAGE_STORE = "com.waz.zclient.core.stores";
    protected static final String PACKAGE_CONTROLLER = "com.waz.zclient.controllers";

    protected static final String PACKAGE_STORE_STUB = PACKAGE_STORE + ".stub";
    protected static final String PACKAGE_CONTROLLER_STUB = PACKAGE_CONTROLLER + ".stub";

    private String stubPackageName;

    @Override
    public void checkElement(Elements elementUtils,
                             Types typeUtils,
                             Element annotatedElement) throws ProcessingException {
        if (annotatedElement.getKind() != ElementKind.INTERFACE) {
            throw new ProcessingException(annotatedElement,
                                          "Only interfaces can be annotated with @%s or %s",
                                          Store.class.getSimpleName(),
                                          Controller.class.getSimpleName());
        }

    }

    @Override
    public void generate(Elements elementUtils, Types typeUtils, Filer filer) throws IOException {
        if (annotatedClasses.isEmpty()) {
            return;
        }
        stubPackageName = isController() ? PACKAGE_CONTROLLER_STUB : PACKAGE_STORE_STUB;
        for (CoreAnnotatedClass annotatedClass : annotatedClasses) {
            //this one we can just do manually for now.
            if (annotatedClass.getInstanceNameSuffix().equals("ZMessagingApiStore")) {
                continue;
            }
            createStubStoreClass(annotatedClass, filer);
        }
    }

    private void createStubStoreClass(CoreAnnotatedClass annotatedClass, Filer filer) throws IOException {
        final String stubClassName = BASE_PREFIX_STUB + annotatedClass.getInstanceNameSuffix();

        ClassName interf = ClassName.get(annotatedClass.getAnnotatedType());

        Set<MethodSpec> methodSpecs = annotatedClass.getAllMethods();

        TypeSpec stubClass = TypeSpec.classBuilder(stubClassName)
                                     .addSuperinterface(interf)
                                     .addJavadoc(AUTOGENERATED_WARNING)
                                     .addModifiers(Modifier.PUBLIC)
                                     .addMethods(methodSpecs)
                                     .build();
        JavaFile.builder(stubPackageName, stubClass).build().writeTo(filer);
    }

    private boolean isController() {
        return annotatedClasses.get(0).getSimpleName().contains("Controller");
    }
}
