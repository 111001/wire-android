package com.waz.annotions.processing.builders;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.waz.annotions.processing.types.ControllerAnnotatedClass;

import javax.lang.model.element.Modifier;
import java.util.ArrayList;
import java.util.List;

public class IControllerFactoryBuilder extends AbsFactoryBuilder<ControllerAnnotatedClass> {

    @Override
    protected TypeSpec modifyFactorySpec(TypeSpec.Builder builder) {
        return TypeSpec.interfaceBuilder(getClassName())
                       .addModifiers(Modifier.PUBLIC)
                       .addJavadoc(AUTOGENERATED_WARNING)
                       .addMethods(generateFactoryMethods())
                       .build();
    }

    /**
     * destroy all default fields - this is an interface.
     */
    @Override
    protected void addExtraFields(List<FieldSpec> fields) {
        fields = new ArrayList<>();
    }

    /**
     * Disregard the default method builders and produce abstract methods instead
     */
    @Override
    protected MethodSpec modifyStoreOrControllerGetter(MethodSpec.Builder builder,
                                                       ControllerAnnotatedClass annotatedClass) {
        return MethodSpec.methodBuilder(annotatedClass.getGetterName())
                         .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                         .returns(ClassName.get(annotatedClass.getAnnotatedType()))
                         .build();
    }

    @Override
    protected MethodSpec modifySetActivity(MethodSpec.Builder builder) {
        return MethodSpec.methodBuilder("setActivity")
                  .returns(TypeName.VOID)
                  .addParameter(ClassName.get("android.app", "Activity"), "activity")
                  .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                  .build();
    }

    @Override
    protected MethodSpec modifySetGlobalLayout(MethodSpec.Builder builder) {
        return MethodSpec.methodBuilder("setGlobalLayout")
                         .returns(TypeName.VOID)
                         .addParameter(ClassName.get("android.view", "View"), "globalLayoutView")
                         .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                         .build();
    }

    @Override
    protected MethodSpec modifyTearDown(MethodSpec.Builder builder) {
        return MethodSpec.methodBuilder("tearDown")
                         .returns(TypeName.VOID)
                         .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                         .build();
    }

    @Override
    protected MethodSpec modifyIsTornDown(MethodSpec.Builder builder) {
        return MethodSpec.methodBuilder("isTornDown")
                         .returns(TypeName.BOOLEAN)
                         .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                         .build();
    }

    @Override
    protected String getClassName() {
        return PREFIX_INTERFACE + FACTORY_NAME_CONTROLLER;
    }

    @Override
    protected String getPackageName() {
        return PACKAGE_CONTROLLER;
    }
}

